# Procedural knowledge for test suite

# a far from exhaustive set of tests

# updating goal buffer
run {test test1} => run {foo bar}
run {foo bar; test ?test}
  =>
    action {@do result; test ?test; result true}

# checking that one value is different from another
run {test test2}, run {test ~test4}
  =>
	action {@do result; test test2; result true}

# undefining a property in a buffer
run {test test3}, run {test ?test}
  => 
	test3 {test ?test; foo bar}
test3 {test ?test; foo bar}
  =>
	test3 {foo ~}
test3 {test ?test; foo ~}
  =>
	action {@do result; test ?test; result true}
	
# put followed by get
run {test test4}
  =>
	test4 {test test4},
	test {@module facts; @do put; test test4},
	test {@module facts; @do get; test test4}
test4 {test ?test}, test {@module facts; test ?test}
  =>
	action {@do result; test ?test; result true}
	
# delete followed by get
run {test test5}
  =>
	test5 {},
	test {@module facts; @do put; test test4},
	test {@module facts; @do put; test test5},
	test {@module facts; @do delete; test test5},
	test {@module facts; @do get}
test5 {}, test {@module facts; test test4}
  =>
	action {@do result; test test5; result true}
test5 {}, test {@module facts; test test5}
  =>
	action {@do result; test test5; result false}

# greater than, and less than or equal
run {test test6}
  =>
	test {@module facts; x 23; y 26; z 23},
	test6 {}
test6 {}, test {@module facts; x ?x; y ?y; z ?z; @lteq ?x, ?z; @gt ?y, ?x}
  =>
	action {@do result; test test6; result true}

# iteration over matching chunks
run {test test7}
  => 
    town {@module facts; @do next; county cornwall},
    test7 {}
     
test7 {}, town {@module facts; @id ?town; @more true}
  => 
    action {@do log; message ?town},
    town {@module facts; @do next; county somerset}
test7 {}, town {@module facts; @id ?town; @more false} 
  => 
    action {@do log; message ?town},
    action {@do result; test test7; result true},
    town {@module facts; @do clear}

# iteration over properties
run {test test8}
  =>
    set {@module facts; a 1; c 2},
    property {@module facts; @do properties; step 8; @to goal}
property {step 8; name ?name; value ?value; @more true}
  =>
    console {@do log; message ?name, is, ?value},
    property {@do next}
property {step 8; name ?name; value ?value; @more false}
  =>
    console {@do log; message ?name, is, ?value},
    action {@do result; test test8; result true}
    
# iteration over comma separated lists
run {test test9}
  =>
    person {@module facts; @do get; name Wendy},
	test9 {}
test9 {}, person {@module facts; name Wendy; friends ?friends}
  =>
    item {@for ?friends; @from 1; @to 2; test test9}
item {test test9; value ?value; index ?index; @more true}
  =>
    console {@do log; message item, ?index, is, ?value},
    item {@do next}
item {test test9; value ?value; index ?index; @more false}
  =>
    console {@do log; message item, ?index, is, ?value},
    action {@do result; test test9; result true}
     
# accessing @status in a condition 
run {test test10}
  => 
    town {@module facts; @do get; county berkshire},
    test10 {}
test10 {}, town {@module facts; county berkshire; @status ?status}
  =>
    action {@do result; test test10; result true},
    console {@do log; message status, is, ?status}

# handling get with no matching chunks     
run {test test11}
  => 
    town {@module facts; @do get; county yorkshire},
    test11 {}
test11 {}, !town {@module facts; @status ?status}
  =>
    action {@do result; test test11; result true},
    console {@do log; message status, is, ?status}

# queuing sub-goals    
run {test test12}
 =>
   test12 {@do queue; @priority 7}
test12 {}
 => 
   action {@do result; test test12; result true}
    
# handling @context matching correctly
run {test test13}
 =>
   # should fail as we don't specify the @context
   wants {@module facts; @do get; person mary},
   test13.1 {}
test13.1 {}, !wants {@module facts; person mary}
 =>
   # should succeed as we specify the correct @context
   wants {@context s2; @do get; @module facts; person mary},
   test13.2 {}
test13.2 {}, wants {@context s2; @module facts; person mary}
 =>
   action {@do result; test test13; result true}

# handling @subject matching  
run {test test14}
 =>
   likes {@module facts; @do get; @subject john},
   test14 {}
test14 {}, likes {@module facts; @subject john}
 =>
   action {@do result; test test14; result true}

# handling @object matching  
run {test test15}
 =>
   likes {@module facts; @do get; @object janet},
   test15 {}
test15 {}, likes {@module facts; @object janet}
 =>
   action {@do result; test test15; result true}
   
# handling @push
run {test test16}
 =>
   test16 {list a, b},
   test16 {@push c; @to list}
test16 {list a,b,c}
 =>
   action {@do result; test test16; result true}
   
# handling @unshift
run {test test17}
 =>
   test17 {list a, b},
   test17 {@unshift c; @to list}
test17 {list c,a,b}
 =>
   action {@do result; test test17; result true}
   
# handling @pop
run {test test18}
 =>
   test18 {list a, b, c},
   test18 {@pop list; @to item}
test18 {list a,b; item c}
 =>
   action {@do result; test test18; result true}
   
# handling @shift
run {test test19}
 =>
   test19 {list a, b, c},
   test19 {@shift list; @to item}
test19 {list b,c; item a}
 =>
   action {@do result; test test19; result true}
